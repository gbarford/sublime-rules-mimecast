attack_types:
- Credential Phishing
description: Detects DocuSign phishing messages with no DocuSign links, a DocuSign
  logo attached, from an untrusted sender.
detection_methods:
- Computer Vision
- Content analysis
- Header analysis
- Natural Language Understanding
- Optical Character Recognition
- Sender analysis
- URL screenshot
id: 814a5694-d626-5bf4-a1ba-a1dbcb625279
name: 'Brand impersonation: DocuSign image attachment lure with no DocuSign links'
severity: high
source: "type.inbound\nand (\n  (\n    0 < length(attachments) <= 8\n    and length(filter(attachments,\
  \ .file_type in $file_types_images)) > 0\n  )\n  or (\n    length(attachments) >\
  \ 0\n    and all(attachments, .file_type in $file_types_images)\n  )\n)\nand any(body.links,\n\
  \        not strings.ilike(.href_url.domain.root_domain, \"docusign.*\")\n)\nand\
  \ (\n  any(attachments,\n      any(ml.logo_detect(.).brands, .name == \"DocuSign\"\
  )\n      or any(file.explode(.),\n             strings.ilike(.scan.ocr.raw, \"*DocuSign*\"\
  )\n             and (\n               any(ml.nlu_classifier(.scan.ocr.raw).intents,\n\
  \                   .name == \"cred_theft\" and .confidence != \"low\"\n       \
  \        )\n               or regex.icontains(.scan.ocr.raw,\n                 \
  \                 \"((re)?view|access|complete(d)?) document(s)?\",\n          \
  \                        \"[^d][^o][^c][^u]sign\",\n                           \
  \       \"important edocs\",\n                                  // German (Document\
  \ (check|check|sign|sent))\n                                  \"Dokument (\xFCberpr\xFC\
  fen|pr\xFCfen|unterschreiben|geschickt)\",\n                                  //\
  \ German (important|urgent|immediate)\n                                  \"(wichtig|dringend|sofort)\"\
  \n               )\n             )\n             and not (\n                 strings.ilike(.scan.ocr.raw,\
  \ \"*DocuSigned By*\") and\n                 strings.ilike(.scan.ocr.raw, \"*DocuSign\
  \ Envelope ID*\")\n            )\n      )\n  )\n\n  // accomidate truncated pngs\
  \ and GIF files which can cause logodetect/OCR failures\n  or any(attachments,\n\
  \         (\n           .file_type =~ \"gif\"\n           or any(file.explode(.),\n\
  \                  any(.scan.exiftool.fields,\n                      .key == \"\
  Warning\" and .value == \"Truncated PNG image\"\n                  )\n         \
  \  )\n         )\n         and (\n           any(ml.logo_detect(beta.message_screenshot()).brands,\n\
  \               (\n                 .name == \"DocuSign\"\n                 or any(file.explode(beta.message_screenshot()),\n\
  \                        strings.ilike(.scan.ocr.raw, \"*DocuSign*\")\n        \
  \         )\n               )\n           )\n           and (\n             any(file.explode(beta.message_screenshot()),\n\
  \                 any(ml.nlu_classifier(.scan.ocr.raw).intents,\n              \
  \       .name == \"cred_theft\" and .confidence != \"low\"\n                 )\n\
  \                 or regex.icontains(.scan.ocr.raw,\n                          \
  \          \"((re)?view|access|complete(d)?) document(s)?\",\n                 \
  \                   \"[^d][^o][^c][^u]sign\",\n                                \
  \    \"important edocs\",\n                                    // German (Document\
  \ (check|check|sign|sent))\n                                    \"Dokument (\xFC\
  berpr\xFCfen|pr\xFCfen|unterschreiben|geschickt)\",\n                          \
  \          // German (important|urgent|immediate)\n                            \
  \        \"(wichtig|dringend|sofort)\"\n                 )\n                 and\
  \ not (\n                    strings.ilike(.scan.ocr.raw, \"*DocuSigned By*\") and\n\
  \                    strings.ilike(.scan.ocr.raw, \"*DocuSign Envelope ID*\")\n\
  \                )\n             )\n           )\n         )\n  )\n)\nand (\n  not\
  \ profile.by_sender().solicited\n  or (\n    profile.by_sender().any_messages_malicious_or_spam\n\
  \    and not profile.by_sender().any_false_positives\n  )\n)\nand not profile.by_sender().any_false_positives\n\
  \n// negate docusign 'via' messages\nand not (\n  any(headers.hops,\n      any(.fields,\n\
  \          .name == \"X-Api-Host\" and strings.ends_with(.value, \"docusign.net\"\
  )\n      )\n  )\n  and strings.contains(sender.display_name, \"via\")\n)\n\n// negate\
  \ docusign originated emails\nand not any(headers.hops,\n            regex.imatch(.received.server.raw,\
  \ \".+.docusign.(net|com)\")\n)"
tactics_and_techniques:
- 'Impersonation: Brand'
- Social engineering
tags:
- Mimecast Needs Fix
type: rule
