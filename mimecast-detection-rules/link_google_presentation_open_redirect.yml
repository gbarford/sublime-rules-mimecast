attack_types:
- Credential Phishing
description: Detects emails containing links to Google Document Presentations that
  either have a single page with a single external link, have been removed for Terms
  of Service violations, or have been deleted.
detection_methods:
- URL analysis
- HTML analysis
id: 5d01ee3a-9426-5a8b-bde3-328d6780af6f
name: Google Presentation Open Redirect Phishing
severity: medium
source: |-
  type.inbound
  and any(body.links,
          // body link is to a google doc presentation
           .href_url.query_params == "domain=docs.google.com"
          and strings.istarts_with(.href_url.path, '/presentation/')
          and (
            // and that presentation...
            (
              // contains a slingle link
              length(ml.link_analysis(., mode="aggressive").final_dom.links) == 1

              // cannot be edited via link provided
              and strings.contains(ml.link_analysis(., mode="aggressive").final_dom.raw,
                                   'canEdit:  false'
              )

              // and a single page
              and strings.contains(ml.link_analysis(., mode="aggressive").final_dom.raw,
                                   'slidePageCount:  1.0'
              )

              // where we have links which have been written via a google open redirect
              and any(ml.link_analysis(., mode="aggressive").final_dom.links,
                      // links are not in thhe org_domains
                       not(any($org_domains, ..href_url.query_params == strings.concat("domain=",.)))
                      and (
                        (
                          // don't include high rep domains
                           not(any($tranco_1m, ..href_url.query_params == strings.concat("domain=",.)))
                          and  not(any($umbrella_1m, ..href_url.query_params == strings.concat("domain=",.)))
                        )
                        // if it's in Tranco or Umbrella, still include it if it's one of these
                        or  any($free_file_hosts, ..href_url.query_params == strings.concat("domain=",.))
                        or  any($free_file_hosts, strings.ends_with(..href_url.query_params,.))
                        or  any($free_subdomain_hosts, strings.ends_with(..href_url.query_params,.))
                        // or it's a url shortner
                        or  any($url_shorteners, strings.ends_with(..href_url.query_params,.))
                      )
                      // which have been "unrolled" by the google_open_redirect rule
                      and any(.href_url.rewrite.encoders,
                              . == "google_open_redirect"
                      )
              )
            )
            // or the presentation has been removed for violation of terms of service
            or strings.icontains(ml.link_analysis(., mode="aggressive").final_dom.display_text,
                                 "We're sorry. You can't access this item because it is in violation of our Terms of Service."
            )
            // or the presentation has been deleted
            or strings.icontains(ml.link_analysis(., mode="aggressive").final_dom.display_text,
                                 "Sorry, the file you have requested has been deleted."
            )
          )
  )
tactics_and_techniques:
- Evasion
- Open redirect
- Social engineering
tags:
- Mimecast Hard to Fix
type: rule
